АБ000002525

<xs:schema xmlns:tns="http://www.aigCheck.ru" xmlns:xs="http://www.w3.org/2001/XMLSchema" targetNamespace="http://www.aigCheck.ru" attributeFormDefault="unqualified" elementFormDefault="qualified">
	<xs:complexType name="Check">
		<xs:sequence>
			<xs:element name="DateCheck" type="xs:dateTime"/>
			<xs:element name="Number" type="xs:string"/>
			<xs:element name="OperationType" type="xs:string"/>
			<xs:element name="RTU_UUID" type="xs:string"/>
			<xs:element name="Status_Check" type="xs:string"/>
			<xs:element name="SumCheck" type="xs:string"/>
			<xs:element name="Payments" type="tns:Payment" minOccurs="0" maxOccurs="100"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="Payment">
		<xs:sequence>
			<xs:element name="PaymentType" type="xs:string" nillable="true"/>
			<xs:element name="SumPayment" type="xs:string"/>
			<xs:element name="CodePaymentSort" type="xs:string"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="SaleReport">
		<xs:sequence>
			<xs:element name="Checks" type="tns:Check" nillable="true" minOccurs="0" maxOccurs="100"/>
		</xs:sequence>
	</xs:complexType>
</xs:schema>

//Запрос выборки из МК Опл заказов чеков возвратов.
ВЫБРАТЬ
	Чек.Ссылка КАК Чек,
	Чек.ЗаказКлиента.ПредставлениеДокумента КАК РТУУПП_УИД,
	Чек.ЦенаВключаетНДС КАК ЦенаВключаетНДС,
	Чек.СуммаНДСДокумента КАК СуммаНДСДокумента,
	Чек.СуммаДокумента КАК СуммаЧека,
	Чек.ЗаказКлиента.СуммаДокумента КАК СуммаЗаказа,
	ПРЕДСТАВЛЕНИЕ(Чек.СтатусЧека) КАК СтатусЧека,
	Чек.СтатусОплаты КАК СтатусОплаты,
	Чек.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета,
	Чек.КассоваяСмена КАК КассоваяСмена,
	Чек.ЗаказКлиента КАК ЗаказКлиента,
	Чек.ВидОперации КАК ВидОперации,
	Чек.Проведен КАК Проведен,
	Чек.Дата КАК ДатаЧека,
	Чек.Номер КАК НомерЧека,
	Чек.ВерсияДанных КАК ВерсияДанных,
	Чек.Оплаты.(
		Ссылка КАК Ссылка,
		НомерСтроки КАК НомерСтроки,
		ВидОплаты КАК ВидОплаты,
		Сумма КАК Сумма,
		ТипОплаты КАК ТипОплаты,
		КлючСвязи КАК КлючСвязи
	) КАК Оплаты
ИЗ
	Документ.Чек КАК Чек
ГДЕ
	НЕ Чек.СтатусЧека В (ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Отложен), ЗНАЧЕНИЕ(Перечисление.СтатусыЧеков.Аннулирован))
	И НАЧАЛОПЕРИОДА(Чек.Дата, ДЕНЬ) = &Дата

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	ЗаказКлиента.Номер,
	ЗаказКлиента.ПредставлениеДокумента,
	NULL,
	NULL,
	ЗаказКлиента.СуммаДокумента,
	NULL,
	ПРЕДСТАВЛЕНИЕ(ЗаказКлиента.СтатусЗаказа),
	NULL,
	NULL,
	NULL,
	NULL,
	3,
	NULL,
	ЗаказКлиента.Дата,
	ЗаказКлиента.Номер,
	NULL,
	ПУСТАЯТАБЛИЦА.(, , , , , )
ИЗ
	Документ.ЗаказКлиента КАК ЗаказКлиента
ГДЕ
	ЗаказКлиента.СтатусЗаказа = ЗНАЧЕНИЕ(Перечисление.СтатусыЗаказовКлиентов.Отменен)
	И НАЧАЛОПЕРИОДА(ЗаказКлиента.Дата, ДЕНЬ) = &Дата



Функция GetData(ID_Kassa) экспорт 
 // Получить типы объектов XDTO
 Попытка 
	КлиентТип = ФабрикаXDTO.Тип("http://localHost/request", "Customer");
    ЗаявкаТип = ФабрикаXDTO.Тип("http://localHost/request", "Documetns");
	ТоварТип  = ФабрикаXDTO.Тип("http://localHost/request", "Product");
	ПакетЗаказовТип=ФабрикаXDTO.Тип("http://localHost/request", "PackageOrders");
	// Выбираем актуального водителя по Коду	
	ЗапросВодитель = новый Запрос;
	
	Экспедитор=ПолучитьЭкспедитора(ID_Kassa);
  
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |	ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаявки.Заявка) КАК ЗаявкаУПП,
        |	ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаявки.Заявка.Контрагент) КАК Контрагент,
        |	Представление(МаршрутныйЛистЗаявки.Заявка.КонтактноеЛицо) КАК КонтактноеЛицо,
        |	МаршрутныйЛистЗаявки.Заявка.ТелефонКонтактногоЛица КАК Телефон,
        |	Представление(МаршрутныйЛистЗаявки.Заявка.ДокументОснование) КАК РТУ,
		|   МаршрутныйЛистЗаявки.Заявка.ДокументОснование.ссылка КАК РТУСсылка,
        |	МаршрутныйЛистЗаявки.Заявка.Адрес КАК АдресДоставки,
        |	КонтактнаяИнформация.Поле1 КАК ПочтовыйИндекс,
        |	КонтактнаяИнформация.Поле2 КАК Регион,
        |	КонтактнаяИнформация.Поле3 КАК Район,
        |	КонтактнаяИнформация.Поле4 КАК Город,
        |	КонтактнаяИнформация.Поле5 КАК НасПункт,
        |	КонтактнаяИнформация.Поле6 КАК Улица,
        |	КонтактнаяИнформация.Поле7 КАК Дом,
        |	КонтактнаяИнформация.Поле8 КАК Корпус,
        |	КонтактнаяИнформация.Поле9 КАК Квартира,
        |	КонтактнаяИнформация.Поле10
        |ИЗ
        |	Документ.МаршрутныйЛист.Заявки КАК МаршрутныйЛистЗаявки
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
        |		ПО МаршрутныйЛистЗаявки.Заявка.Контрагент = КонтактнаяИнформация.Объект
        |ГДЕ
       	|	МаршрутныйЛистЗаявки.Ссылка.Водитель = &Водитель  И
      	|	МаршрутныйЛистЗаявки.Заявка.ДатаДоставки = &ДатаДоставки
        |	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента)";
           
     Запрос.УстановитьПараметр("Водитель", Экспедитор);
	 //ДатаДоставки=НачалоДня(ТекущаяДата()-8*86400);
	 ДатаДоставки='20181022';
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
     РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	 	Возврат Неопределено;
	КонецЕсли;
	 Выборка = РезультатЗапроса.Выбрать();
	 
	 ПакетЗаказов = ФабрикаXDTO.Создать(ПакетЗаказовТип);
	 
Пока  Выборка.Следующий() Цикл     
     //Документ = Выборка.Ссылка.ПолучитьОбъект();         
            
     // Создать объект XDTO ЗаказыМК
     Заявка = ФабрикаXDTO.Создать(ЗаявкаТип);
     Заявка.Number = Выборка.ЗаявкаУПП;
     Клиент = ФабрикаXDTO.Создать(КлиентТип);
     Клиент.Name = Выборка.КонтактноеЛицо;
     Заявка.Customer.Добавить(Клиент);
     Заявка.Status = "Заявка";
     Заявка.AdressCity=Выборка.Город;
	 Заявка.AdressHome=Выборка.Дом;
	 Заявка.AdressFlat=Выборка.Квартира;
	 Заявка.AdressEntrance=" "; //Подъезд
	 Заявка.AdressStreet=Выборка.Улица;
	 Заявка.AdressFloor=" ";  //Этаж
	 Заявка.Email=" ";
	 Заявка.DesairedDatePurchase=ТекущаяДата();
	 Заявка.Comment=Выборка.ЗаявкаУПП;
	 Заявка.UID_RTU=Строка(Выборка.РТУСсылка.УникальныйИдентификатор());
	 Заявка.Phone=Выборка.Телефон;
	 //
     	
	//Табличная Часть РТУ
	ЗапросТовары = Новый Запрос;
    ЗапросТовары.Текст = "ВЫБРАТЬ
                         |	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.Номенклатура) КАК Номенклатура,
                         |	РеализацияТоваровУслугТовары.Количество КАК Количество,
                         |	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.СтавкаНДС) КАК СтавкаНДС,
                         |	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
                         |	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
                         |	РеализацияТоваровУслугТовары.Цена КАК Цена,
                         |	РеализацияТоваровУслугТовары.ПроцентАвтоматическихСкидок как АвтоСкидка,
                         |	РеализацияТоваровУслугТовары.ПроцентСкидкиНаценки как СкидкаНаценка
                         |ИЗ
                         |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
                         |ГДЕ
                         |	РеализацияТоваровУслугТовары.Ссылка = &СсылкаНаДокумент";
	   
	ЗапросТовары.УстановитьПараметр("СсылкаНаДокумент", Выборка.РТУСсылка);   
	РезультатЗапросаТовары = ЗапросТовары.Выполнить();
    	
	Если РезультатЗапросаТовары.Пустой() Тогда
	 	Возврат Неопределено;
	КонецЕсли;
	ВыборкаТовары = РезультатЗапросаТовары.Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл       
	    Товар 					=ФабрикаXDTO.Создать(ТоварТип);
		Товар.Name 				=ВыборкаТовары.Номенклатура; 
	    Товар.Quantity			=ВыборкаТовары.Количество;
		Товар.DiscountPercent	=ВыборкаТовары.АвтоСкидка+ВыборкаТовары.СкидкаНаценка;
		Товар.DiscountSumm		=0;
	   	Товар.RateNDS			=ВыборкаТовары.СтавкаНДС;
		Товар.Summa				=ВыборкаТовары.Сумма;
		Товар.SummaNDS			=ВыборкаТовары.СуммаНДС;
		Товар.Price				=ВыборкаТовары.Цена;
		//
		Заявка.Product.Добавить(Товар);
	КонецЦикла;
	
ПакетЗаказов.Order.Добавить(Заявка);	

КонецЦикла;

    ЗаписатьОтчетВРегистр(Экспедитор,ID_Kassa,1,"Выгрузка в МК прошла успешно");
// Вернуть Пакет Заказов для отправки
     Возврат ПакетЗаказов;
 Исключение
	 ОписаниеОшибок=ОписаниеОшибки();
	 ЗаписатьОтчетВРегистр(Экспедитор,ID_Kassa,0,ОписаниеОшибок);
	 Возврат ОписаниеОшибок;
КонецПопытки;	 
	 
КонецФункции

Функция SetData(PackageChek, ID_Kassa)
Попытка
	
	Если PackageChek=Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	Экспедитор=ПолучитьЭкспедитора(ID_Kassa);
 //Возврат "УУУУ";	
	
	Для каждого Чек Из PackageChek.Checks Цикл
		УИДРТУ = Новый УникальныйИдентификатор(Чек.RTU_UUID);
		СсылкаРТУ=Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИДРТУ);
		Номер=СсылкаРТУ.Номер;
		////
		
		//Оплата=Чек.Payments[0];
				
		Если Чек.OperationType ="0" тогда   //0 Оплаты
			ДокументОплаты=Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ВидОперацииПлатКартой=Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;
			СсылкаНаОcнование=СсылкаРТУ;
		КонецЕсли;
		Если Чек.OperationType ="1" или Чек.OperationType ="3" тогда  // Возвраты (1- Есть чеки возврата) (3- Заказы со статусом отменен)
			ВидОперацииПлатКартой=Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю;
			ДокументВозврата=Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
			ДокументВозврата.Дата=Чек.DateCheck;
			ДокументВозврата.Заполнить(СсылкаРТУ);
			ДокументВозврата.Комментарий="Документ Создан на Основнии полученных данных из МК";
			ДокументВозврата.Записать();
			ДокументОплаты=Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			СсылкаНаОcнование=ДокументВозврата.Ссылка;
		КонецЕсли;
      
		Для каждого Оплата из Чек.Payments цикл 

		Если Оплата.PaymentType ="Наличные" тогда   // Если наличные создаем  непроведенные ПКО на основании РТУ
			ДокументОплаты.Дата=Чек.DateCheck;
			
			//Пко.Основание=СсылкаРТУ;
			ДокументОплаты.Заполнить(СсылкаНаОcнование);
			ДокументОплаты.СуммаДокумента=Оплата.SumPayment;
			ДокументОплаты.РасшифровкаПлатежа[0].СуммаПлатежа=Оплата.SumPayment;
			ДокументОплаты.РасшифровкаПлатежа[0].СуммаВзаиморасчетов=Оплата.SumPayment;
			ДокументОплаты.Комментарий="Документ Создан на Основнии полученных данных из МК";
			ДокументОплаты.Записать();
		КонецЕсли;
		
		Если Оплата.PaymentType ="Платежная карта" тогда   // Если оплата картой создаем  непроведенные ОплатаОтПокупателяПлатежнойКартой на основании РТУ
			ОплатаКартой=Документы.ОплатаОтПокупателяПлатежнойКартой.СоздатьДокумент();
			ОплатаКартой.Дата=Чек.DateCheck;
			
			//Пко.Основание=СсылкаРТУ;
			ОплатаКартой.Заполнить(СсылкаНаОcнование);
			//Оплата=Чек.Payments[0];
			ОплатаКартой.СуммаДокумента=Оплата.SumPayment;
			ОплатаКартой.РасшифровкаПлатежа[0].СуммаПлатежа=Оплата.SumPayment;
			ОплатаКартой.РасшифровкаПлатежа[0].СуммаВзаиморасчетов=Оплата.SumPayment;
			ОплатаКартой.Комментарий="Документ Создан на Основнии полученных данных из МК";
			ОплатаКартой.ВидОперации=ВидОперацииПлатКартой;
			ОплатаКартой.Записать();
		КонецЕсли;
		конецЦикла;
		//УППСозданиеПКО(Чек, СсылкаРТУ);
	КонецЦикла;
	  ЗаписатьОтчетВРегистр(Экспедитор,ID_Kassa,1,"Загрузка из МК прошла успешно");
	Возврат Номер;
	
Исключение
		ОписаниеОшибок=ОписаниеОшибки();
		ЗаписатьОтчетВРегистр(Экспедитор,ID_Kassa,0,ОписаниеОшибок);
		возврат ОписаниеОшибок;
КонецПопытки;
КонецФункции


Процедура ЗаписатьОтчетВРегистр(Сотрудник, МкКасса, Статус, ОписаниеОшибок);
МенеджерЗаписи = РегистрыСведений.aigОбменМК_УПП.СоздатьМенеджерЗаписи();
	
МенеджерЗаписи.ДатаОбмена = ТекущаяДата();
МенеджерЗаписи.Сотрудник =Сотрудник ;
МенеджерЗаписи.МККасса=МкКасса;
МенеджерЗаписи.СтатусВыгрузки=Статус;
МенеджерЗаписи.ОписаниеОшибок=ОписаниеОшибок;

МенеджерЗаписи.Записать();
КонецПроцедуры

Функция ПолучитьЭкспедитора(ID_Kassa)
	
	Запрос = новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	                     |	СотрудникиОрганизаций.Код,
	                     |	СотрудникиОрганизаций.Ссылка
	                     |ИЗ
	                     |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	                     |ГДЕ
	                     |	СотрудникиОрганизаций.Код = &Код
	                     |	И СотрудникиОрганизаций.Актуальность = ИСТИНА ";
	Запрос.УстановитьПараметр("Код", ID_Kassa);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	 	Возврат Неопределено;
	КонецЕсли;
	 ВыборкаЭкспедитор = РезультатЗапроса.Выбрать();
     ВыборкаЭкспедитор.Следующий();     
    Экспедитор =ВыборкаЭкспедитор.ссылка;	
	Возврат Экспедитор;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
////////////////////////////////////14.12.2018//////////////////////////
///////////////////////////////////////////////////////////////////////
Функция GetData(ID_Kassa,INN_Kassa) экспорт 
 // Получить типы объектов XDTO
 
	КлиентТип = ФабрикаXDTO.Тип("http://localHost/request", "Customer");
    ЗаявкаТип = ФабрикаXDTO.Тип("http://localHost/request", "Documetns");
	ТоварТип  = ФабрикаXDTO.Тип("http://localHost/request", "Product");
	ПакетЗаказовТип=ФабрикаXDTO.Тип("http://localHost/request", "PackageOrders");
	// Выбираем актуального водителя по Коду	
	ЗапросВодитель = новый Запрос;
	
	Экспедитор=ПолучитьЭкспедитора(ID_Kassa, INN_Kassa);
  
    Запрос = Новый Запрос;
    Запрос.Текст =
        "ВЫБРАТЬ
        |	ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаявки.Заявка) КАК ЗаявкаУПП,
        |	ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаявки.Заявка.Контрагент) КАК Контрагент,
        |	ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаявки.Заявка.КонтактноеЛицо) КАК КонтактноеЛицо,
        |	МаршрутныйЛистЗаявки.Заявка.ТелефонКонтактногоЛица КАК Телефон,
        |	ПРЕДСТАВЛЕНИЕ(МаршрутныйЛистЗаявки.Заявка.ДокументОснование.Номер) КАК РТУ,
        |	МаршрутныйЛистЗаявки.Заявка.ДокументОснование.Ссылка КАК РТУСсылка,
        |	МаршрутныйЛистЗаявки.Заявка.Адрес КАК АдресДоставки,
        |	КонтактнаяИнформация.Поле1 КАК ПочтовыйИндекс,
        |	КонтактнаяИнформация.Поле2 КАК Регион,
        |	КонтактнаяИнформация.Поле3 КАК Район,
        |	КонтактнаяИнформация.Поле4 КАК Город,
        |	КонтактнаяИнформация.Поле5 КАК НасПункт,
        |	КонтактнаяИнформация.Поле6 КАК Улица,
        |	КонтактнаяИнформация.Поле7 КАК Дом,
        |	КонтактнаяИнформация.Поле8 КАК Корпус,
        |	КонтактнаяИнформация.Поле9 КАК Квартира,
        |	КонтактнаяИнформация.Поле10
        |ИЗ
        |	Документ.МаршрутныйЛист.Заявки КАК МаршрутныйЛистЗаявки
        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
        |		ПО МаршрутныйЛистЗаявки.Заявка.Контрагент = КонтактнаяИнформация.Объект
        |ГДЕ
        |	МаршрутныйЛистЗаявки.Ссылка.Водитель = &Водитель
        |	И МаршрутныйЛистЗаявки.Заявка.ДатаДоставки = &ДатаДоставки
        |	И КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента)
		|	И МаршрутныйЛистЗаявки.Заявка.ДокументОснование.Ссылка<>ЗНАЧЕНИЕ(Документ.РеализацияТоваровУслуг.ПустаяСсылка)
		|	И МаршрутныйЛистЗаявки.Заявка.ДокументОснование.Контрагент.ИНН =""""
        |	И МаршрутныйЛистЗаявки.Заявка.ДокументОснование.Организация.ИНН =&ИНН";
		
           
     Запрос.УстановитьПараметр("Водитель", Экспедитор);
	 //ДатаДоставки=НачалоДня(ТекущаяДата()-8*86400);
	 ДатаДоставки='20181022';
	Запрос.УстановитьПараметр("ДатаДоставки", ДатаДоставки);
	Запрос.УстановитьПараметр("ИНН", СокрЛП(INN_Kassa));
     РезультатЗапроса = Запрос.Выполнить();
	 Если РезультатЗапроса.Пустой() Тогда
		 ОписаниеОшибок="По кассе: "+ID_Kassa+" ИНН: "+INN_Kassa+ " Не найдено маршрутных листов. "+" Экспедитор: "+Экспедитор;
		 ЗаписатьОтчетВРегистр(Документы.РеализацияТоваровУслуг.ПустаяСсылка(),Экспедитор,ID_Kassa,0,ОписаниеОшибок);
		Возврат ОписаниеОшибок;
	КонецЕсли;
	 Выборка = РезультатЗапроса.Выбрать();
	 
	 ПакетЗаказов = ФабрикаXDTO.Создать(ПакетЗаказовТип);
	 
Пока  Выборка.Следующий() Цикл     
     //Документ = Выборка.Ссылка.ПолучитьОбъект();         
 Попытка         
     // Создать объект XDTO ЗаказыМК
     Заявка = ФабрикаXDTO.Создать(ЗаявкаТип);
     Заявка.Number = "РТУ № "+Выборка.РТУ;
     Клиент = ФабрикаXDTO.Создать(КлиентТип);
     Клиент.Name = Выборка.КонтактноеЛицо;
     Заявка.Customer.Добавить(Клиент);
     Заявка.Status = "Заявка";
     Заявка.AdressCity=Выборка.Город;
	 Заявка.AdressHome=Выборка.Дом;
	 Заявка.AdressFlat=Выборка.Квартира;
	 Заявка.AdressEntrance=" "; //Подъезд
	 Заявка.AdressStreet=Выборка.Улица;
	 Заявка.AdressFloor=" ";  //Этаж
	 Заявка.Email=" ";
	 Заявка.DesairedDatePurchase=ТекущаяДата();
	 Заявка.Comment=Выборка.ЗаявкаУПП;
	 Заявка.UID_RTU=Строка(Выборка.РТУСсылка.УникальныйИдентификатор());
	 Заявка.Phone=Выборка.Телефон;
	 //
     	
	//Табличная Часть РТУ
	ЗапросТовары = Новый Запрос;
    ЗапросТовары.Текст = "ВЫБРАТЬ
                         |	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.Номенклатура) КАК Номенклатура,
                         |	РеализацияТоваровУслугТовары.Количество КАК Количество,
                         |	ПРЕДСТАВЛЕНИЕ(РеализацияТоваровУслугТовары.СтавкаНДС) КАК СтавкаНДС,
                         |	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
                         |	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
                         |	РеализацияТоваровУслугТовары.Цена КАК Цена,
                         |	РеализацияТоваровУслугТовары.ПроцентАвтоматическихСкидок как АвтоСкидка,
                         |	РеализацияТоваровУслугТовары.ПроцентСкидкиНаценки как СкидкаНаценка
                         |ИЗ
                         |	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
                         |ГДЕ
                         |	РеализацияТоваровУслугТовары.Ссылка = &СсылкаНаДокумент";
	   
	ЗапросТовары.УстановитьПараметр("СсылкаНаДокумент", Выборка.РТУСсылка);   
	РезультатЗапросаТовары = ЗапросТовары.Выполнить();
    	
	Если РезультатЗапросаТовары.Пустой() Тогда
	 	ОписаниеОшибок="В документе РТУ: "+Выборка.РТУ+ " Не заполнена табличная часть Товары. Обратитесь к Менеджеру.";
		ЗаписатьОтчетВРегистр(Выборка.РТУСсылка,Экспедитор,ID_Kassa,0,ОписаниеОшибок);
		Возврат ОписаниеОшибок;
	КонецЕсли;
	ВыборкаТовары = РезультатЗапросаТовары.Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл       
	    Товар 					=ФабрикаXDTO.Создать(ТоварТип);
		Товар.Name 				=ВыборкаТовары.Номенклатура; 
	    Товар.Quantity			=ВыборкаТовары.Количество;
		Товар.DiscountPercent	=ВыборкаТовары.АвтоСкидка+ВыборкаТовары.СкидкаНаценка;
		Товар.DiscountSumm		=0;
	   	Товар.RateNDS			=ВыборкаТовары.СтавкаНДС;
		Товар.Summa				=ВыборкаТовары.Сумма;
		Товар.SummaNDS			=ВыборкаТовары.СуммаНДС;
		Товар.Price				=ВыборкаТовары.Цена;
		//
		Заявка.Product.Добавить(Товар);
	КонецЦикла;
	
	ПакетЗаказов.Order.Добавить(Заявка);	
  	ЗаписатьОтчетВРегистр(Выборка.РТУСсылка,Экспедитор,ID_Kassa,1,"Выгрузка в МК прошла успешно");
  	Исключение
		 ОписаниеОшибок=ОписаниеОшибки();
		 ЗаписатьОтчетВРегистр(Выборка.РТУСсылка,Экспедитор,ID_Kassa,0,ОписаниеОшибок);
		 Возврат ОписаниеОшибок;
	КонецПопытки;
КонецЦикла;

// Вернуть Пакет Заказов для отправки
	 

Возврат ПакетЗаказов;
КонецФункции

Функция SetData(PackageChek, ID_Kassa, INN_Kassa)

	
	Если PackageChek=Неопределено тогда
		Возврат Ложь;
	КонецЕсли;
	
	Экспедитор=ПолучитьЭкспедитора(ID_Kassa,INN_Kassa);
 //Возврат "УУУУ";	
	
Для каждого Чек Из PackageChek.Checks Цикл
	Попытка	
		УИДРТУ = Новый УникальныйИдентификатор(Чек.RTU_UUID);
		СсылкаРТУ=Документы.РеализацияТоваровУслуг.ПолучитьСсылку(УИДРТУ);
		Номер=СсылкаРТУ.Номер;
		////
		СДДС=Справочники.СтатьиДвиженияДенежныхСредств.НайтиПоКоду("000000001");
		//Оплата=Чек.Payments[0];
				
		Если Чек.OperationType ="0" тогда   //0 Оплаты
			ДокументОплаты=Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			ВидОперацииПлатКартой=Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ОплатаПокупателя;
			СсылкаНаОcнование=СсылкаРТУ;
		КонецЕсли;
		Если Чек.OperationType ="1" или Чек.OperationType ="3" тогда  // Возвраты (1- Есть чеки возврата) (3- Заказы со статусом отменен)
			ВидОперацииПлатКартой=Перечисления.ВидыОперацийОплатаОтПокупателяПлатежнойКартой.ВозвратДенежныхСредствПокупателю;
			ДокументВозврата=Документы.ВозвратТоваровОтПокупателя.СоздатьДокумент();
			ДокументВозврата.Дата=Чек.DateCheck;
			ДокументВозврата.Заполнить(СсылкаРТУ);
			Если Чек.OperationType ="1" тогда
				ТЗИсход=ДокументВозврата.Товары.Выгрузить();
				ДокументВозврата.Товары.Очистить();
				СтруктураОтбора=Новый Структура;
				массивСтрок=новый массив;
				Для каждого Товар из Чек.Products цикл
					//масивСтрок.Добавить(Справочники.Номенклатура.НайтиПоНаименованию(Товар.Name));
					НайденнаяСтрока=ТЗИсход.Найти(Справочники.Номенклатура.НайтиПоНаименованию(Товар.Name));
					Если НайденнаяСтрока<>Неопределено тогда
						НайденнаяСтрока[2]=Товар.Quantity;
						НайденнаяСтрока[8]=Товар.Summa;
						НайденнаяСтрока[15]=Товар.SummaNDS;
						массивСтрок.Добавить(НайденнаяСтрока);
					КонецЕсли;
				КонецЦикла;
				ТзНов=ТЗИсход.Скопировать(массивСтрок);
				ДокументВозврата.Товары.Загрузить(ТзНов);
			КонецЕсли;
			ДокументВозврата.ОтражатьВУправленческомУчете=Истина;
			//Заполняем ДокументыРеализации
			Если Чек.OperationType ="3" тогда
				ДокРеализ=СсылкаРТУ;
				ДокументыРеализации=ДокументВозврата.ДокументыРасчетовСКонтрагентом.Добавить();
				ДокументыРеализации.ДатаОплаты=ДокРеализ.Дата;
				ДокументыРеализации.Сделка=ДокРеализ.Сделка;
				ДокументыРеализации.ДокументРасчетовСКонтрагентом=ДокРеализ;
				ДокументыРеализации.СуммаВзаиморасчетов=ДокРеализ.СуммаДокумента;
				ДокументыРеализации.СуммаРегл=ДокРеализ.СуммаДокумента;
			КонецЕсли;	
				
				ДокументВозврата.Комментарий="Документ Создан на Основнии полученных данных из МК";
			ДокументВозврата.Записать();
			ДокументОплаты=Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			СсылкаНаОcнование=ДокументВозврата.Ссылка;
		КонецЕсли;
      
		Для каждого Оплата из Чек.Payments цикл 

		Если Оплата.PaymentType ="Наличные" тогда   // Если наличные создаем  непроведенные ПКО на основании РТУ
			ДокументОплаты.Дата=Чек.DateCheck;
			
			//Пко.Основание=СсылкаРТУ;
			ДокументОплаты.Заполнить(СсылкаНаОcнование);
			ДокументОплаты.СуммаДокумента=Оплата.SumPayment;
			ДокументОплаты.РасшифровкаПлатежа[0].СуммаПлатежа=Оплата.SumPayment;
			ДокументОплаты.РасшифровкаПлатежа[0].СуммаВзаиморасчетов=Оплата.SumPayment;
			ДокументОплаты.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств=СДДС;
			ДокументОплаты.Комментарий="Документ Создан на Основнии полученных данных из МК";
			ДокументОплаты.ОтражатьВБухгалтерскомУчете=Ложь;
			ДокументОплаты.Записать();
		КонецЕсли;
		
		Если Оплата.PaymentType ="Платежнаякарта" тогда   // Если оплата картой создаем  непроведенные ОплатаОтПокупателяПлатежнойКартой на основании РТУ
			ОплатаКартой=Документы.ОплатаОтПокупателяПлатежнойКартой.СоздатьДокумент();
			ОплатаКартой.Дата=Чек.DateCheck;
			//Пко.Основание=СсылкаРТУ;
			ОплатаКартой.Заполнить(СсылкаНаОcнование);
			//Оплата=Чек.Payments[0];
			ОплатаКартой.СуммаДокумента=Оплата.SumPayment;
			ОплатаКартой.РасшифровкаПлатежа[0].СуммаПлатежа=Оплата.SumPayment;
			ОплатаКартой.РасшифровкаПлатежа[0].СуммаВзаиморасчетов=Оплата.SumPayment;
			ОплатаКартой.РасшифровкаПлатежа[0].СтатьяДвиженияДенежныхСредств=СДДС;
			ОплатаКартой.Комментарий="Документ Создан на Основнии полученных данных из МК";
			ОплатаКартой.ВидОперации=ВидОперацииПлатКартой;
			ОплатаКартой.ОтражатьВБухгалтерскомУчете=Ложь;
			ОплатаКартой.Записать();
		КонецЕсли;
		конецЦикла;
		//УППСозданиеПКО(Чек, СсылкаРТУ);
		ЗаписатьОтчетВРегистр(СсылкаРТУ, Экспедитор,ID_Kassa,1,"Загрузка из МК прошла успешно");
		Исключение
			ОписаниеОшибок=ОписаниеОшибки();
			ЗаписатьОтчетВРегистр(СсылкаРТУ,Экспедитор,ID_Kassa,0,ОписаниеОшибок);
			возврат ОписаниеОшибок;
		КонецПопытки;
		
	КонецЦикла;
	 
	Возврат Номер;
	

КонецФункции


Процедура ЗаписатьОтчетВРегистр(РТУ, Сотрудник, МкКасса, Статус, ОписаниеОшибок);
МенеджерЗаписи = РегистрыСведений.aigОбменМК_УПП.СоздатьМенеджерЗаписи();

МенеджерЗаписи.РТУ=РТУ;
МенеджерЗаписи.ДатаОбмена = ТекущаяДата();
МенеджерЗаписи.Сотрудник =Сотрудник ;
МенеджерЗаписи.МККасса=МкКасса;
МенеджерЗаписи.СтатусВыгрузки=Статус;
МенеджерЗаписи.ОписаниеОшибок=ОписаниеОшибок;

МенеджерЗаписи.Записать();
КонецПроцедуры

Функция ПолучитьЭкспедитора(ID_Kassa, INN)
	
	Запрос = новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	                     |	СотрудникиОрганизаций.Код,
	                     |	СотрудникиОрганизаций.Ссылка
	                     |ИЗ
	                     |	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	                     |ГДЕ
	                     |	СотрудникиОрганизаций.Код = &Код
						 |	И СотрудникиОрганизаций.Организация.Инн=&ИНН
	                     |	И СотрудникиОрганизаций.Актуальность = ИСТИНА ";
	Запрос.УстановитьПараметр("Код", ID_Kassa);
	Запрос.УстановитьПараметр("ИНН", INN);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	 	Возврат Неопределено;
	КонецЕсли;
	 ВыборкаЭкспедитор = РезультатЗапроса.Выбрать();
     ВыборкаЭкспедитор.Следующий();     
    Экспедитор =ВыборкаЭкспедитор.ссылка;	
	Возврат Экспедитор;
	
КонецФункции

